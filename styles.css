/* add universal selector*/
* {
  text-align: center;
}

/* add background color and short padding to the whole website */
body {
    /* eliminate blue light for eyes*/
    background-color: lightyellow;
    padding: 1in 1in 1in 1in;
}

/* each header contains a different color representation 
    and absolute length unit, also an element selector */
h1 {
    color: hsl(9, 100%, 64%);
    text-align: center;
    font-size: 50px;
    min-height: 50mm;
    position: relative;
    font-family: 'Tangerine', serif;
}
/* apply short margin and text decoration */
h2 {
    color: #000;
    text-align: left;
    font-size: 22px;
    margin: 1px 1px 1px 1px;
    text-decoration:overline;
}

h3 {
    color:  rgba(100, 0, 100, 50);
    text-align: center;
    font-size:5mm; 
    display: inline;
    position: static;
    text-decoration:underline;
    max-height: 40pt;
}
/* no text decoration for h4 and h5 as sector list*/
h4,h5 {
    text-decoration:none;
}
/* display none to hide h6 */
h6 {
    display: none;
    position: absolute;
}

/* apply text css and fontsize to descendant of div */
div p {
    font-family: times;
    font-size: 12pt;
    text-align: left;
    color: #000;
}
/* apply text css and fontsize to siblings of div */
div ~ p {
  background-color: skyblue;
}

/* apply css with id selector */
#lastMeeting{
    text-decoration: line-through;
}
/* Apply media query to adjust font size 
        for different screen width for responsiveness */
@media (min-width: 400px) and (orientation: landscape) {
    p {
        font-size: 20pt;
    }
}

/* apply long padding and class selector*/
div.whiteboard {
    background: green;
    padding-top: 20px;
    padding-right: 20px;
    padding-bottom: 20px;
    padding-left: 20px;
}

/* apply width, height*/
div.whiteboard img {
    width: 50%;
    height: auto;
}
/* implement box CSS */
div.whiteboard:hover {
    border: 10px solid #888;
}
/* apply margin auto */
section.knowPeople {
    margin: auto;
}

/* implement border/box CSS 
        and relative unit for different atribute selector */
input[type=text] {
    border-radius: 2px;
    margin-top: 1em;
    border-style: dashed;
    border-radius: 4px;
    border-color: green
}

/* test both long boarder style and short in another */
input[type=radio] {
    border-color: #ABF;
    border-radius: 10px;
    margin-bottom: 10vw;
    border-style: solid;
}

input[type=date] {
    border: 10px dotted rgb(255,100,0);
    margin-left: 20lvh;
    max-width: 20px;
}

form {
    border: 5cm solid;
    margin-right: 20vmax; 
    border-color: hsla(100, 100%, 60%, 0.5);
    min-width: 20pt;
}
/* implement display and position for active class*/
span {
    display: inline-block;
    position: sticky;
    width: 80px;
    height: 140px;
    padding: 10px;
    border: 10px dotted blue;    
    background-color: pink; 
}

span:active {
    background: purple;
    padding-top: 100px;
    padding-right: 100px;
    padding-bottom: 100px;
    padding-left: 100px;
}

/* Apply adjacent sibling selector(change in span) */
div + p {
    display: block;
    position: relative;
    color: brown
}

/* Apply flex display and its attributes */
.meetingFormat {
    display: flex;
    background-color: greenyellow;
    order: 3;
    justify-content: space-between;
}
/* use child combinator */
.meetingFormat > div {
    background-color: #AAA;
    flex-grow: 2;
    margin: 5px;
    padding: 10px;
    font-size: 20px;
}

/* Apply Grid Container and its attributes to nav */
nav {
    background-color: orange;
}

nav > a {
    background-color: aqua;
    display: grid;
    justify-content: space-around;
    align-content: center;
    grid-template-columns: 100px 10px auto auto;
    column-gap: 100px;
}
/*identify grid property for special class and combining two selectors*/
a.special {
    background-color: white;
    grid-column: 1/2;
    grid-row: 2/5;
}